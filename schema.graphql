type Approval @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  spender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuthorizationCanceled @entity(immutable: true) {
  id: Bytes!
  authorizer: Bytes! # address
  nonce: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuthorizationUsed @entity(immutable: true) {
  id: Bytes!
  authorizer: Bytes! # address
  nonce: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexUpdated @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint128
  rate: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StartedEarning @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StoppedEarning @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  recipient: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Holder @entity {
  id: Bytes! # address
  balance: BigInt! # uint256
}

type TokenStats @entity {
  id: ID! # Use a fixed ID like "1" for simplicity
  totalVolume: BigInt! # Total amount of tokens transferred
}

type DailyTokenStats @entity {
  id: ID! # Use a combination of token ID and date
  date: String! # YYYY-MM-DD format
  dailyVolume: BigInt! # Total volume for the day
  tokenSupply: BigInt! # Total token supply for the day
}
